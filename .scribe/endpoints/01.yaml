name: 'Usuarios (V1)'
description: |-

  Gestión básica de usuarios con funcionalidades CRUD estándar.
  Para funcionalidades avanzadas como estadísticas usar V2.
  Todos los endpoints requieren autenticación Bearer token.
endpoints:
  -
    custom: []
    httpMethods:
      - GET
    uri: api/v1/users
    metadata:
      custom: []
      groupName: 'Usuarios (V1)'
      groupDescription: |-

        Gestión básica de usuarios con funcionalidades CRUD estándar.
        Para funcionalidades avanzadas como estadísticas usar V2.
        Todos los endpoints requieren autenticación Bearer token.
      subgroup: ''
      subgroupDescription: ''
      title: 'Listar usuarios'
      description: 'Obtiene una lista paginada de usuarios con filtros básicos.'
      authenticated: true
      deprecated: false
    headers:
      Authorization: 'Bearer YOUR_BEARER_TOKEN'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      page:
        custom: []
        name: page
        description: 'Número de página para paginación.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        deprecated: false
      'filter[name]':
        custom: []
        name: 'filter[name]'
        description: 'Filtrar por nombre.'
        required: false
        example: admin
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        deprecated: false
      'filter[email]':
        custom: []
        name: 'filter[email]'
        description: 'Filtrar por email.'
        required: false
        example: admin@admin.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        deprecated: false
    cleanQueryParameters:
      page: 1
      'filter[name]': admin
      'filter[email]': admin@admin.com
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        custom: []
        status: 200
        content: |-
          {
            "status": "success",
            "message": "Usuarios obtenidos correctamente.",
            "data": [
              {
                "id": 1,
                "name": "Admin User",
                "email": "admin@admin.com",
                "created_at": "2025-10-30T10:00:00.000000Z",
                "updated_at": "2025-10-30T10:00:00.000000Z"
              }
            ]
          }
        headers: []
        description: ''
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
  -
    custom: []
    httpMethods:
      - POST
    uri: api/v1/users
    metadata:
      custom: []
      groupName: 'Usuarios (V1)'
      groupDescription: |-

        Gestión básica de usuarios con funcionalidades CRUD estándar.
        Para funcionalidades avanzadas como estadísticas usar V2.
        Todos los endpoints requieren autenticación Bearer token.
      subgroup: ''
      subgroupDescription: ''
      title: 'Crear usuario'
      description: 'Crea un nuevo usuario en el sistema.'
      authenticated: true
      deprecated: false
    headers:
      Authorization: 'Bearer YOUR_BEARER_TOKEN'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        custom: []
        name: name
        description: validation.max.
        required: true
        example: b
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        deprecated: false
      email:
        custom: []
        name: email
        description: validation.email.
        required: true
        example: zbailey@example.net
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        deprecated: false
      password:
        custom: []
        name: password
        description: validation.min.
        required: true
        example: '-0pBNvYgxw'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        deprecated: false
      data.type:
        custom: []
        name: data.type
        description: 'Tipo del recurso. Debe ser "user".'
        required: true
        example: user
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        deprecated: false
      data.attributes.name:
        custom: []
        name: data.attributes.name
        description: 'Nombre completo del usuario.'
        required: true
        example: 'Juan Pérez'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        deprecated: false
      data.attributes.email:
        custom: []
        name: data.attributes.email
        description: 'Email único del usuario.'
        required: true
        example: juan@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        deprecated: false
      data.attributes.password:
        custom: []
        name: data.attributes.password
        description: 'Contraseña (mínimo 8 caracteres).'
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        deprecated: false
      data.attributes.password_confirmation:
        custom: []
        name: data.attributes.password_confirmation
        description: 'Confirmación de contraseña.'
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        deprecated: false
    cleanBodyParameters:
      name: b
      email: zbailey@example.net
      password: '-0pBNvYgxw'
    fileParameters: []
    responses:
      -
        custom: []
        status: 201
        content: |-
          {
            "status": "success",
            "message": "Usuario creado correctamente.",
            "data": {
              "id": 51,
              "name": "Juan Pérez",
              "email": "juan@example.com",
              "created_at": "2025-10-30T11:00:00.000000Z",
              "updated_at": "2025-10-30T11:00:00.000000Z"
            }
          }
        headers: []
        description: ''
      -
        custom: []
        status: 422
        content: |-
          {
            "status": "error",
            "message": "Los datos proporcionados no son válidos.",
            "data": {
              "email": ["The email has already been taken."]
            }
          }
        headers: []
        description: ''
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
  -
    custom: []
    httpMethods:
      - GET
    uri: 'api/v1/users/{id}'
    metadata:
      custom: []
      groupName: 'Usuarios (V1)'
      groupDescription: |-

        Gestión básica de usuarios con funcionalidades CRUD estándar.
        Para funcionalidades avanzadas como estadísticas usar V2.
        Todos los endpoints requieren autenticación Bearer token.
      subgroup: ''
      subgroupDescription: ''
      title: 'Mostrar usuario'
      description: 'Obtiene un usuario específico por su ID.'
      authenticated: true
      deprecated: false
    headers:
      Authorization: 'Bearer YOUR_BEARER_TOKEN'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        custom: []
        name: id
        description: 'The ID of the user.'
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        deprecated: false
      user:
        custom: []
        name: user
        description: 'ID del usuario.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        deprecated: false
    cleanUrlParameters:
      id: architecto
      user: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        custom: []
        status: 200
        content: |-
          {
            "status": "success",
            "message": "Usuario obtenido correctamente.",
            "data": {
              "id": 1,
              "name": "Admin User",
              "email": "admin@admin.com",
              "created_at": "2025-10-30T10:00:00.000000Z",
              "updated_at": "2025-10-30T10:00:00.000000Z"
            }
          }
        headers: []
        description: ''
      -
        custom: []
        status: 404
        content: |-
          {
            "status": "error",
            "message": "El recurso User solicitado no fue encontrado."
          }
        headers: []
        description: ''
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
  -
    custom: []
    httpMethods:
      - DELETE
    uri: 'api/v1/users/{id}'
    metadata:
      custom: []
      groupName: 'Usuarios (V1)'
      groupDescription: |-

        Gestión básica de usuarios con funcionalidades CRUD estándar.
        Para funcionalidades avanzadas como estadísticas usar V2.
        Todos los endpoints requieren autenticación Bearer token.
      subgroup: ''
      subgroupDescription: ''
      title: 'Eliminar usuario'
      description: 'Elimina un usuario del sistema de forma permanente.'
      authenticated: true
      deprecated: false
    headers:
      Authorization: 'Bearer YOUR_BEARER_TOKEN'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        custom: []
        name: id
        description: 'The ID of the user.'
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        deprecated: false
      user:
        custom: []
        name: user
        description: 'ID del usuario.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        deprecated: false
    cleanUrlParameters:
      id: architecto
      user: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        custom: []
        status: 200
        content: |-
          {
            "status": "success",
            "message": "Usuario eliminado correctamente.",
            "data": null
          }
        headers: []
        description: ''
      -
        custom: []
        status: 403
        content: |-
          {
            "status": "error",
            "message": "No tienes permisos para realizar esta acción."
          }
        headers: []
        description: ''
      -
        custom: []
        status: 404
        content: |-
          {
            "status": "error",
            "message": "El recurso User solicitado no fue encontrado."
          }
        headers: []
        description: ''
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
